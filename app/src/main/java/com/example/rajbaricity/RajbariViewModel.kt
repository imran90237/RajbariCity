package com.example.rajbaricity

import android.net.Uri
import android.util.Patterns
import androidx.compose.runtime.*
import androidx.lifecycle.ViewModel
import com.example.rajbaricity.model.Section

class RajbariViewModel : ViewModel() {

    data class User(
        val name: String,
        val emailOrPhone: String,
        val password: String,
        val profileImageUri: String
    )

    private val users = mutableStateListOf<User>()

    var loggedInUser by mutableStateOf<User?>(null)
        private set

    // ржирждрзБржи ржкрзНрж░ржкрж╛рж░рзНржЯрж┐
    val isRegistered: Boolean
        get() = users.isNotEmpty()

    val loggedInUserName: String?
        get() = loggedInUser?.name

    val loggedInUserEmail: String?
        get() = loggedInUser?.emailOrPhone

    val loggedInUserImage: String?
        get() = loggedInUser?.profileImageUri

    fun registerUser(
        name: String,
        emailOrPhone: String,
        password: String,
        imageUri: Uri?
    ): Boolean {
        if (!isValidEmail(emailOrPhone) && !isValidPhone(emailOrPhone)) {
            return false
        }
        if (users.any { it.emailOrPhone == emailOrPhone }) {
            return false
        }
        val finalImageUri = imageUri?.toString() ?: "man"
        val newUser = User(name, emailOrPhone, password, finalImageUri)
        users.add(newUser)
        return true
    }

    fun login(emailOrPhone: String, password: String): Boolean {
        val matchedUser = users.find { it.emailOrPhone == emailOrPhone && it.password == password }
        return if (matchedUser != null) {
            loggedInUser = matchedUser
            true
        } else {
            false
        }
    }

    fun logout() {
        loggedInUser = null
    }

    fun updateUserProfile(newName: String, newEmail: String) {
        loggedInUser = loggedInUser?.copy(
            name = newName,
            emailOrPhone = newEmail
        )
    }




    private fun isValidEmail(input: String): Boolean =
        Patterns.EMAIL_ADDRESS.matcher(input).matches()

    private fun isValidPhone(input: String): Boolean =
        Patterns.PHONE.matcher(input).matches()

    val sections = listOf(
        Section("рж╢рж┐ржХрзНрж╖рж╛", "ЁЯУЪ", "education"),
        Section("ржбрж╛ржХрзНрждрж╛рж░", "ЁЯй║", "doctor"),
        Section("рж╣рж╛рж╕ржкрж╛рждрж╛рж▓", "ЁЯПе", "hospital"),
        Section("рж░ржХрзНржд", "ЁЯй╕", "blood"),
        Section("ржмрж╛рж╕рзЗрж░ рж╕ржорзЯрж╕рзВржЪрзА", "ЁЯЪМ", "bus_schedule"),
        Section("ржЯрзНрж░рзЗржирзЗрж░ рж╕ржорзЯрж╕рзВржЪрзА", "ЁЯЪЖ", "train_schedule"),
        Section("ржЬрж░рзБрж░рж┐ ржирж╛ржорзНржмрж╛рж░ ржУ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи", "ЁЯУЮ", "emergency"),
        Section("ржжрж░рзНрж╢ржирзАрзЯ рж╕рзНржерж╛ржи", "ЁЯУ╕", "tourist_places"),
        Section("ржУрзЯрзЗржмрж╕рж╛ржЗржЯ", "ЁЯМР", "websites"),
        Section("ржорж┐рж╕рзНрждрзНрж░рж┐", "ЁЯЫая╕П", "mistry"),
        Section("ржЧрж╛рзЬрж┐ ржнрж╛рзЬрж╛", "ЁЯЪЦ", "car_rent"),
        Section("рж╣рж╛рж░рж╛ржирзЛ ржУ ржкрж╛ржУрзЯрж╛", "ЁЯз│", "lost_found"),
        Section("ржХрзБрж░рж┐рзЯрж╛рж░ рж╕рж╛рж░рзНржнрж┐рж╕", "ЁЯУж", "courier"),
        Section("ржЪрж╛ржХрж░рж┐ ржУ ржкрзНрж░рж╢рж┐ржХрзНрж╖ржг", "ЁЯТ╝", "jobs_training"),
        Section("рж╣рзЛржЯрзЗрж▓ рж░рзЗрж╕рзНржЯрзБрж░рзЗржирзНржЯ", "ЁЯН╜я╕П", "hotels_restaurants"),
        Section("рж▓рзЛржХрж╛рж▓ ржорж╛рж░рзНржХрзЗржЯ", "ЁЯЫНя╕П", "local_market"),
        Section("ржмрзНржпржмрж╕рж╛ ржУ ржХрзГрж╖рж┐ рж╕рж╣рж╛рзЯрждрж╛", "ЁЯМ╛", "business_agriculture"),
        Section("ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржорж╕ржЬрж┐ржж", "ЁЯХМ", "mosque_nearby")
    )
}
