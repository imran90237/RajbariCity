package com.example.rajbaricity

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

data class CarInfo(
    val carName: String,
    val driverName: String,
    val type: String,
    val thana: String,
    val phone: String
)

@Composable
fun CarRentScreen() {
    var selectedTabIndex by remember { mutableStateOf(0) }
    val tabs = listOf("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏", "‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ï‡¶æ‡¶∞", "‡¶Æ‡¶æ‡¶á‡¶ï‡ßç‡¶∞‡ßã‡¶¨‡¶æ‡¶∏", "‡¶™‡¶ø‡¶ï ‡¶Ü‡¶™", "‡¶ü‡ßç‡¶∞‡¶æ‡¶ï")

    var carList by remember {
        mutableStateOf(
            listOf(
                CarInfo("Toyota Hiace", "‡¶Æ‡ßã‡¶É ‡¶ï‡¶æ‡¶Æ‡¶æ‡¶≤", "‡¶Æ‡¶æ‡¶á‡¶ï‡ßç‡¶∞‡ßã‡¶¨‡¶æ‡¶∏", "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡ßú‡ßÄ ‡¶∏‡¶¶‡¶∞", "017XXXXXXXX"),
                CarInfo("Nissan Ambulance", "‡¶Ü‡¶¨‡ßç‡¶¶‡ßÅ‡¶≤ ‡¶Æ‡¶æ‡¶≤‡ßá‡¶ï", "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶¨‡ßÅ‡¶≤‡ßá‡¶®‡ßç‡¶∏", "‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ", "018XXXXXXXX")
            )
        )
    }

    var showAddDialog by remember { mutableStateOf(false) }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text(
            text = "üöó ‡¶ó‡¶æ‡ßú‡¶ø ‡¶≠‡¶æ‡ßú‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏",
            style = MaterialTheme.typography.titleLarge
        )

        ScrollableTabRow(selectedTabIndex = selectedTabIndex) {
            tabs.forEachIndexed { index, title ->
                Tab(
                    selected = selectedTabIndex == index,
                    onClick = { selectedTabIndex = index },
                    text = { Text(title) }
                )
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        val filteredList = carList.filter { it.type == tabs[selectedTabIndex] }

        if (filteredList.isEmpty()) {
            Text("‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø", color = Color.Gray)
        } else {
            filteredList.forEach {
                CarRentCard(info = it)
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        OutlinedButton(
            onClick = { showAddDialog = true },
            modifier = Modifier.align(Alignment.CenterHorizontally)
        ) {
            Icon(Icons.Default.Add, contentDescription = "Add")
            Spacer(modifier = Modifier.width(8.dp))
            Text("‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
        }
    }

    if (showAddDialog) {
        AddCarDialog(
            onDismiss = { showAddDialog = false },
            onAdd = { newCar ->
                carList = carList + newCar
                showAddDialog = false
            }
        )
    }
}

@Composable
fun CarRentCard(info: CarInfo) {
    val context = LocalContext.current

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD)),
        elevation = CardDefaults.cardElevation(6.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("üöò ‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ: ${info.carName}", fontSize = 16.sp)
            Text("üë®‚Äç‚úàÔ∏è ‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ: ${info.driverName}", fontSize = 14.sp)
            Text("üìã ‡¶ß‡¶∞‡¶®: ${info.type}", fontSize = 14.sp)
            Text("üèòÔ∏è ‡¶•‡¶æ‡¶®‡¶æ: ${info.thana}", fontSize = 14.sp)
            Text(
                text = "üìû ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®: ${info.phone}",
                color = Color(0xFF1976D2),
                modifier = Modifier.clickable {
                    val intent = Intent(Intent.ACTION_DIAL, Uri.parse("tel:${info.phone}"))
                    context.startActivity(intent)
                }
            )
        }
    }
}

@Composable
fun AddCarDialog(onDismiss: () -> Unit, onAdd: (CarInfo) -> Unit) {
    var carName by remember { mutableStateOf("") }
    var driverName by remember { mutableStateOf("") }
    var type by remember { mutableStateOf("") }
    var thana by remember { mutableStateOf("") }
    var phone by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text("‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®") },
        text = {
            Column {
                OutlinedTextField(value = carName, onValueChange = { carName = it }, label = { Text("‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ") })
                OutlinedTextField(value = driverName, onValueChange = { driverName = it }, label = { Text("‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ") })
                OutlinedTextField(value = type, onValueChange = { type = it }, label = { Text("‡¶ó‡¶æ‡ßú‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶®") })
                OutlinedTextField(value = thana, onValueChange = { thana = it }, label = { Text("‡¶•‡¶æ‡¶®‡¶æ") })
                OutlinedTextField(value = phone, onValueChange = { phone = it }, label = { Text("‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞") })
            }
        },
        confirmButton = {
            TextButton(
                onClick = {
                    if (carName.isNotBlank() && driverName.isNotBlank() && type.isNotBlank()) {
                        onAdd(CarInfo(carName, driverName, type, thana, phone))
                    }
                }
            ) {
                Text("‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("‡¶¨‡¶æ‡¶§‡¶ø‡¶≤")
            }
        }
    )
}
