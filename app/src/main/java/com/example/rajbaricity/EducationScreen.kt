// File: EducationScreen.kt
package com.example.rajbaricity

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun EducationScreen(
    onNavigateTo: (String) -> Unit
) {
    val categories = listOf(
        "\uD83C\uDFEB ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤" to "school",
        "\uD83C\uDF93 ‡¶ï‡¶≤‡ßá‡¶ú" to "college",
        "\uD83D\uDD4C ‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ" to "madrasa",
        "\uD83D\uDC65 ‡¶ï‡ßã‡¶ö‡¶ø‡¶Ç ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞" to "coaching",
        "\uD83D\uDCD6 ‡¶ø‡¶ï‡ßç‡¶∑‡¶ï ‡¶ö‡¶æ‡¶á" to "want_to_study",
        "‚úç\uFE0F ‡¶™‡ßú‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶á" to "want_to_teach"
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            "üìö ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center
        )

        Spacer(modifier = Modifier.height(12.dp))

        LazyVerticalGrid(
            columns = GridCells.Fixed(2),
            verticalArrangement = Arrangement.spacedBy(12.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            modifier = Modifier.fillMaxHeight()
        ) {
            items(categories) { (title, route) ->
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(160.dp) // ‡¶Ü‡¶ó‡ßá ‡¶õ‡¶ø‡¶≤ 100.dp, ‡¶è‡¶ñ‡¶® ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã
                        .clickable { onNavigateTo(route) },
                    shape = RoundedCornerShape(12.dp),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFE0F7FA)),
                    elevation = CardDefaults.cardElevation(4.dp)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(12.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text("üìò", fontSize = 32.sp)
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            title,
                            fontWeight = FontWeight.Medium,
                            fontSize = 18.sp,
                            textAlign = TextAlign.Center
                        )
                    }
                }
            }
        }
    }
}







//import android.net.Uri
//import androidx.activity.compose.rememberLauncherForActivityResult
//import androidx.activity.result.contract.ActivityResultContracts
//import androidx.compose.foundation.background
//import androidx.compose.foundation.layout.*
//import androidx.compose.foundation.lazy.LazyColumn
//import androidx.compose.foundation.lazy.items
//import androidx.compose.foundation.shape.CircleShape
//import androidx.compose.foundation.shape.RoundedCornerShape
//import androidx.compose.material.icons.Icons
//import androidx.compose.material.icons.filled.Add
//import androidx.compose.material3.*
//import androidx.compose.runtime.*
//import androidx.compose.runtime.saveable.rememberSaveable
//import androidx.compose.ui.Alignment
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//
//@Composable
//fun EducationScreen(onHomeClick: () -> Unit = {}) {
//    val tabs = listOf("‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤", "‡¶ï‡¶≤‡ßá‡¶ú", "‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ", "‡¶ï‡ßã‡¶ö‡¶ø‡¶Ç ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞", "‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶ö‡¶æ‡¶á", "‡¶™‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶á")
//    var selectedTabIndex by rememberSaveable { mutableStateOf(0) }
//    var showForm by rememberSaveable { mutableStateOf(false) }
//    var searchQuery by rememberSaveable { mutableStateOf("") }
//
//    val educationData = remember {
//        mutableStateListOf(
//            mutableStateListOf(
//                "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶â‡¶ö‡ßç‡¶ö ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡¶Ø‡¶º" to "‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶ø‡¶§: ‡ßß‡ßÆ‡ßØ‡ß¶\n‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶∂‡ßç‡¶∞‡ßá‡¶∑‡ßç‡¶† ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡•§",
//                "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶¨‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶â‡¶ö‡ßç‡¶ö ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡¶Ø‡¶º" to "‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶ø‡¶§: ‡ßß‡ßØ‡ß¨‡ßß\n‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶∂‡ßç‡¶∞‡ßá‡¶∑‡ßç‡¶† ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡•§"
//            ),
//            mutableStateListOf(
//                "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶ï‡¶≤‡ßá‡¶ú" to "‡¶∏‡ßç‡¶®‡¶æ‡¶§‡¶ï ‡¶ì ‡¶∏‡ßç‡¶®‡¶æ‡¶§‡¶ï‡ßã‡¶§‡ßç‡¶§‡¶∞ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏, ‡¶ú‡¶æ‡¶§‡ßÄ‡ßü ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡ßü ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§‡•§"
//            ),
//            mutableStateListOf(
//                "‡¶¶‡¶æ‡¶∞‡ßÅ‡¶≤ ‡¶â‡¶≤‡ßÅ‡¶Æ ‡¶≠‡¶æ‡¶ú‡¶®‡¶ö‡¶æ‡¶≤‡¶æ ‡¶π‡¶æ‡¶´‡¶ø‡¶ú‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶ì‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶æ‡¶¶‡ßç‡¶∞‡¶æ‡¶∏‡¶æ" to "‡¶ï‡¶ì‡¶Æ‡ßÄ ‡¶∏‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"
//            ),
//            mutableStateListOf(
//                "‡¶®‡¶ø‡¶â ‡¶π‡¶∞‡¶æ‡¶á‡¶ú‡¶® ‡¶ï‡ßã‡¶ö‡¶ø‡¶Ç ‡¶∏‡ßá‡¶®‡ßç‡¶ü‡¶æ‡¶∞" to "SSC ‡¶ì HSC ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡ßã‡¶ö‡¶ø‡¶Ç‡•§"
//            ),
//            mutableStateListOf(), // ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶ö‡¶æ‡¶á (student requests)
//            mutableStateListOf()  // ‡¶™‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶á (teacher offers)
//        )
//    }
//
//    if (showForm) {
//        when (selectedTabIndex) {
//            in 0..3 -> {
//                EducationFormScreen(
//                    onCancel = { showForm = false },
//                    onSubmit = { name, year, thana, address, phone ->
//                        val info = "‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶ø‡¶§: $year | ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ: $thana, $address | ‡¶´‡ßã‡¶®: $phone"
//                        educationData[selectedTabIndex].add(0, name to info)
//                        showForm = false
//                    }
//                )
//            }
//            4 -> {
//                StudentRequestForm(
//                    onCancel = { showForm = false },
//                    onSubmit = { name, title, subject, days, salary, gender, thana, address, phone ->
//                        val info = "$title\n‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º: $subject\n‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá $days ‡¶¶‡¶ø‡¶®\n‡¶¨‡ßá‡¶§‡¶®: $salary\n‡¶≤‡¶ø‡¶ô‡ßç‡¶ó: $gender\n$thana, $address\n‡¶´‡ßã‡¶®: $phone"
//                        educationData[4].add(0, name to info)
//                        showForm = false
//                    }
//                )
//            }
//            5 -> {
//                TeacherOfferForm(
//                    onCancel = { showForm = false },
//                    onSubmit = { name, title, subject, days, salary, thana, address, phone, gender, photoUri ->
//                        val info = "$title\n‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º: $subject\n‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá $days ‡¶¶‡¶ø‡¶®\n‡¶¨‡ßá‡¶§‡¶®: $salary\n‡¶≤‡¶ø‡¶ô‡ßç‡¶ó: $gender\n$thana, $address\n‡¶´‡ßã‡¶®: $phone\n‡¶õ‡¶¨‡¶ø: ${photoUri?.lastPathSegment ?: "‡¶®‡¶æ"}"
//                        educationData[5].add(0, name to info)
//                        showForm = false
//                    }
//                )
//            }
//        }
//    } else {
//        Box(modifier = Modifier.fillMaxSize()) {
//            Column(modifier = Modifier.fillMaxSize()) {
//                ScrollableTabRow(selectedTabIndex = selectedTabIndex, edgePadding = 16.dp) {
//                    tabs.forEachIndexed { index, title ->
//                        Tab(
//                            selected = selectedTabIndex == index,
//                            onClick = { selectedTabIndex = index },
//                            text = { Text(title, fontSize = 14.sp) }
//                        )
//                    }
//                }
//
//                SearchBar(
//                    query = searchQuery,
//                    onQueryChanged = { searchQuery = it },
//                    totalCount = getFilteredCount(educationData[selectedTabIndex], searchQuery)
//                )
//
//                Spacer(modifier = Modifier.height(12.dp))
//
//                EducationTabContent(
//                    query = searchQuery,
//                    data = educationData[selectedTabIndex]
//                )
//
//                Spacer(modifier = Modifier.height(80.dp))
//
//
//            }
//
//            FloatingActionButton(
//                onClick = { showForm = true },
//                shape = CircleShape,
//                containerColor = MaterialTheme.colorScheme.primary,
//                contentColor = Color.White,
//                modifier = Modifier
//                    .align(Alignment.BottomEnd)
//                    .padding(16.dp)
//            ) {
//                Icon(Icons.Default.Add, contentDescription = "‡¶®‡¶§‡ßÅ‡¶® ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®", modifier = Modifier.size(30.dp))
//            }
//        }
//    }
//}
//
//private fun getFilteredCount(data: List<Pair<String, String>>, query: String): Int {
//    return data.count { it.first.contains(query.trim(), ignoreCase = true) }
//}
//
//@Composable
//fun EducationTabContent(query: String, data: List<Pair<String, String>>) {
//    val filteredList = data.filter { it.first.contains(query.trim(), ignoreCase = true) }
//
//    LazyColumn(modifier = Modifier.padding(horizontal = 16.dp)) {
//        items(filteredList) { (title, desc) ->
//            EducationCard(title = title, description = desc)
//        }
//    }
//}
//
//@Composable
//fun EducationCard(title: String, description: String) {
//    Card(
//        modifier = Modifier
//            .fillMaxWidth()
//            .padding(vertical = 8.dp),
//        shape = RoundedCornerShape(12.dp),
//        colors = CardDefaults.cardColors(containerColor = Color(0xFFF1F1F1))
//    ) {
//        Column(modifier = Modifier.padding(16.dp)) {
//            Text(text = title, fontSize = 18.sp, color = Color(0xFF333333))
//            Spacer(modifier = Modifier.height(6.dp))
//            Text(text = description, fontSize = 14.sp, color = Color.DarkGray)
//        }
//    }
//}
//
//@Composable
//fun EducationFormScreen(
//    onCancel: () -> Unit,
//    onSubmit: (String, String, String, String, String) -> Unit
//) {
//    var name by remember { mutableStateOf("") }
//    var year by remember { mutableStateOf("") }
//    var thana by remember { mutableStateOf("") }
//    var address by remember { mutableStateOf("") }
//    var phone by remember { mutableStateOf("") }
//    var imageUri by remember { mutableStateOf<Uri?>(null) }
//
//    val launcher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->
//        imageUri = uri
//    }
//
//    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
//        Text("üìù ‡¶®‡¶§‡ßÅ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®", fontSize = 20.sp, modifier = Modifier.padding(bottom = 16.dp))
//
//        Button(onClick = { launcher.launch("image/*") }) {
//            Text("üì∏ ‡¶õ‡¶¨‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
//        }
//
//        Spacer(modifier = Modifier.height(8.dp))
//
//        OutlinedTextField(value = name, onValueChange = { name = it }, label = { Text("‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = year, onValueChange = { year = it }, label = { Text("‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶≤") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = thana, onValueChange = { thana = it }, label = { Text("‡¶•‡¶æ‡¶®‡¶æ/‡¶â‡¶™‡¶ú‡ßá‡¶≤‡¶æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = address, onValueChange = { address = it }, label = { Text("‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = phone, onValueChange = { phone = it }, label = { Text("‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞") }, modifier = Modifier.fillMaxWidth())
//
//        Spacer(modifier = Modifier.height(16.dp))
//
//        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
//            OutlinedButton(onClick = onCancel) { Text("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤") }
//            Button(onClick = {
//                if (name.isNotBlank()) {
//                    // You could also pass imageUri if you want to save the image Uri along with data
//                    onSubmit(name, year, thana, address, phone)
//                }
//            }) {
//                Text("‚úÖ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü")
//            }
//        }
//    }
//}
//
//@Composable
//fun StudentRequestForm(
//    onCancel: () -> Unit,
//    onSubmit: (String, String, String, String, String, String, String, String, String) -> Unit
//) {
//    var name by remember { mutableStateOf("") }
//    var title by remember { mutableStateOf("") }
//    var subject by remember { mutableStateOf("") }
//    var days by remember { mutableStateOf("") }
//    var salary by remember { mutableStateOf("") }
//    var gender by remember { mutableStateOf("") }
//    var thana by remember { mutableStateOf("") }
//    var address by remember { mutableStateOf("") }
//    var phone by remember { mutableStateOf("") }
//
//    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
//        Text("‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶ö‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®", fontSize = 20.sp, modifier = Modifier.padding(bottom = 16.dp))
//
//        OutlinedTextField(value = name, onValueChange = { name = it }, label = { Text("‡¶®‡¶æ‡¶Æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = title, onValueChange = { title = it }, label = { Text("‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = subject, onValueChange = { subject = it }, label = { Text("‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = days, onValueChange = { days = it }, label = { Text("‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá ‡¶ï‡¶§ ‡¶¶‡¶ø‡¶®") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = salary, onValueChange = { salary = it }, label = { Text("‡¶¨‡ßá‡¶§‡¶®") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = gender, onValueChange = { gender = it }, label = { Text("‡¶≤‡¶ø‡¶ô‡ßç‡¶ó") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = thana, onValueChange = { thana = it }, label = { Text("‡¶•‡¶æ‡¶®‡¶æ/‡¶â‡¶™‡¶ú‡ßá‡¶≤‡¶æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = address, onValueChange = { address = it }, label = { Text("‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = phone, onValueChange = { phone = it }, label = { Text("‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞") }, modifier = Modifier.fillMaxWidth())
//
//        Spacer(modifier = Modifier.height(16.dp))
//
//        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
//            OutlinedButton(onClick = onCancel) { Text("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤") }
//            Button(onClick = {
//                if (name.isNotBlank()) {
//                    onSubmit(name, title, subject, days, salary, gender, thana, address, phone)
//                }
//            }) {
//                Text("‚úÖ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü")
//            }
//        }
//    }
//}
//
//@Composable
//fun TeacherOfferForm(
//    onCancel: () -> Unit,
//    onSubmit: (String, String, String, String, String, String, String, String, String, Uri?) -> Unit
//) {
//    var name by remember { mutableStateOf("") }
//    var title by remember { mutableStateOf("") }
//    var subject by remember { mutableStateOf("") }
//    var days by remember { mutableStateOf("") }
//    var salary by remember { mutableStateOf("") }
//    var thana by remember { mutableStateOf("") }
//    var address by remember { mutableStateOf("") }
//    var phone by remember { mutableStateOf("") }
//    var gender by remember { mutableStateOf("") }
//    var photoUri by remember { mutableStateOf<Uri?>(null) }
//
//    val launcher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->
//        photoUri = uri
//    }
//
//    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
//        Text("‡¶™‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®", fontSize = 20.sp, modifier = Modifier.padding(bottom = 16.dp))
//
//        Button(onClick = { launcher.launch("image/*") }) {
//            Text("‡¶õ‡¶¨‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
//        }
//        photoUri?.let {
//            Text("‡¶õ‡¶¨‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${it.lastPathSegment ?: ""}", fontSize = 12.sp, color = Color.Gray)
//        }
//
//        Spacer(modifier = Modifier.height(8.dp))
//
//        OutlinedTextField(value = name, onValueChange = { name = it }, label = { Text("‡¶®‡¶æ‡¶Æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = title, onValueChange = { title = it }, label = { Text("‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = subject, onValueChange = { subject = it }, label = { Text("‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = days, onValueChange = { days = it }, label = { Text("‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá ‡¶ï‡¶§ ‡¶¶‡¶ø‡¶®") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = salary, onValueChange = { salary = it }, label = { Text("‡¶¨‡ßá‡¶§‡¶®") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = gender, onValueChange = { gender = it }, label = { Text("‡¶≤‡¶ø‡¶ô‡ßç‡¶ó") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = thana, onValueChange = { thana = it }, label = { Text("‡¶•‡¶æ‡¶®‡¶æ/‡¶â‡¶™‡¶ú‡ßá‡¶≤‡¶æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = address, onValueChange = { address = it }, label = { Text("‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ") }, modifier = Modifier.fillMaxWidth())
//        OutlinedTextField(value = phone, onValueChange = { phone = it }, label = { Text("‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞") }, modifier = Modifier.fillMaxWidth())
//
//        Spacer(modifier = Modifier.height(16.dp))
//
//        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
//            OutlinedButton(onClick = onCancel) { Text("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤") }
//            Button(onClick = {
//                if (name.isNotBlank()) {
//                    onSubmit(name, title, subject, days, salary, thana, address, phone, gender, photoUri)
//                }
//            }) {
//                Text("‚úÖ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü")
//            }
//        }
//    }
//}
//
//@Composable
//fun SearchBar(
//    query: String,
//    onQueryChanged: (String) -> Unit,
//    totalCount: Int
//) {
//    Row(
//        modifier = Modifier
//            .fillMaxWidth()
//            .padding(horizontal = 16.dp, vertical = 8.dp),
//        verticalAlignment = Alignment.CenterVertically
//    ) {
//        OutlinedTextField(
//            value = query,
//            onValueChange = onQueryChanged,
//            label = { Text("‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®") },
//            modifier = Modifier.weight(1f),
//            shape = MaterialTheme.shapes.large // Rounded corner
//        )
//
//        Spacer(modifier = Modifier.width(8.dp))
//
//        // Rounded count box
//        Box(
//            contentAlignment = Alignment.Center,
//            modifier = Modifier
//                .background(color = Color(0xFFF0F0F0), shape = MaterialTheme.shapes.large)
//                .padding(horizontal = 12.dp, vertical = 8.dp)
//        ) {
//            Text(
//                text = "$totalCount ‡¶ü‡¶ø",
//                fontSize = 14.sp,
//                color = Color.DarkGray
//            )
//        }
//    }
//}
//
