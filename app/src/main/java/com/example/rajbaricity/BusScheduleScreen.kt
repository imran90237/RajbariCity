package com.example.rajbaricity

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

// --- Data Classes ---
data class BusSchedule(val name: String, val destinations: List<Pair<String, String>>)

data class BusTime(
    val busName: String,
    val from: String,
    val to: String,
    val time: String,
    val contact: String
)

// --- Main Screen with Tabs ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BusScheduleScreen() {
    val tabTitles = listOf("üöå ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßÇ‡¶π", "üïê ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ")
    var selectedTab by remember { mutableStateOf(0) }

    Scaffold { padding ->
        Column(modifier = Modifier.padding(padding)) {
            TabRow(selectedTabIndex = selectedTab) {
                tabTitles.forEachIndexed { index, title ->
                    Tab(
                        selected = selectedTab == index,
                        onClick = { selectedTab = index },
                        text = {
                            Text(
                                text = title,
                                fontSize = 20.sp, // üëà Increase font size here
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // You can add actual content based on selectedTab here
            when (selectedTab) {
                0 -> CounterTabScreen() // üöå ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßÇ‡¶π
                1 -> TimeScheduleTab()     // üïê ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ
            }
        }
    }
}


// --- COUNTER TAB ---
@Composable
fun CounterTabScreen() {
    var showDialog by remember { mutableStateOf(false) }
    var selectedBus by remember { mutableStateOf<BusSchedule?>(null) }

    val busList = remember {
        mutableStateListOf(
            BusSchedule(
                "‡¶∞‡¶æ‡¶¨‡ßá‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶π‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßÇ‡¶π", listOf(
                    "‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ" to "01966274466",
                    "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶π‡¶æ‡¶∞‡ßç‡¶ü" to "01966274400",
                    "‡¶Æ‡¶æ‡¶ü‡¶ø‡¶™‡¶æ‡¶°‡¶º‡¶æ" to "01400077304",
                    "‡¶¨‡¶æ‡¶£‡ßÄ‡¶¨‡¶π" to "01400522110",
                    "‡¶¨‡¶π‡¶∞‡¶™‡ßÅ‡¶∞" to "01933799441",
                    "‡¶¨‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶æ‡¶®‡ßç‡¶¶‡¶ø" to "01909191555",
                    "‡¶®‡¶æ‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ" to "01946181118",
                    "‡¶ó‡¶æ‡¶®‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶∞‡¶æ" to "01400567996",
                    "‡¶ö‡¶®‡ßç‡¶¶‡¶®‡¶ø" to "01400556233",
                    "‡¶¶‡¶∞‡¶ó‡¶æ‡¶ü‡ßã‡¶≤‡¶æ" to "01952530052",
                    "‡¶π‡¶æ‡¶¨‡¶æ‡¶∏‡¶™‡ßÅ‡¶∞" to "01724822671",
                    "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶≤‡¶™‡ßÅ‡¶∞" to "01967737372",
                    "‡¶ï‡¶æ‡¶≤‡¶ø‡¶¨‡¶æ‡¶°‡¶º‡¶ø" to "01709299767",
                    "‡¶®‡¶¶‡ßÅ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ò‡¶æ‡¶ü" to "017160058957",
                    "‡¶¨‡¶æ‡¶π‡ßá‡¶∞‡¶Æ‡ßã‡¶°‡¶º" to "01714210207",
                    "‡¶¨‡¶æ‡¶π‡¶æ‡¶¶‡ßÅ‡¶∞‡¶™‡ßÅ‡¶∞" to "01713549552"
                )
            ),
            BusSchedule(
                "‡¶∏‡ßå‡¶π‡¶æ‡¶∞‡ßç‡¶¶‡ßç‡¶Ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶π‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßÇ‡¶π", listOf(
                    "‡¶ó‡¶æ‡¶¨‡¶§‡¶≤‡ßÄ (‡¶¢‡¶æ‡¶ï‡¶æ)" to "01768235535",
                    "‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ" to "01718558338",
                    "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ" to "01733167396",
                    "‡¶®‡¶¶‡ßÅ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ò‡¶æ‡¶ü" to "01716005957",
                    "‡¶¨‡¶æ‡¶π‡ßá‡¶∞‡¶Æ‡ßã‡¶°‡¶º" to "01713905113",
                    "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶≤‡¶™‡ßÅ‡¶∞" to "01729691558",
                    "‡¶¨‡¶π‡¶∞‡¶™‡ßÅ‡¶∞" to "01736785093",
                    "‡¶¨‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶æ‡¶®‡ßç‡¶¶‡¶ø" to "01734626147",
                    "‡¶®‡¶æ‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ" to "01916723226",
                    "‡¶π‡¶æ‡¶¨‡¶æ‡¶∏‡¶™‡ßÅ‡¶∞" to "01719799100",
                    "‡¶ï‡¶æ‡¶≤‡¶ø‡¶¨‡¶æ‡¶°‡¶º‡¶ø" to "01825408210",
                    "‡¶¨‡¶æ‡¶£‡ßÄ‡¶¨‡¶π" to "01740909540",
                    "‡¶∏‡ßá‡¶®‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ" to "01726960435",
                    "‡¶Æ‡ßÄ‡¶∞‡¶ó‡ßÄ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞" to "01740849550",
                    "‡¶¨‡¶æ‡¶ó‡¶°‡ßÅ‡¶≤‡¶ø" to "01724364707"
                )
            ),
            BusSchedule(
                "‡¶ó‡ßã‡¶≤‡ßç‡¶°‡ßá‡¶® ‡¶≤‡¶æ‡¶á‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶π‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßÇ‡¶π (‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‚ûù ‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ, ‡¶¢‡¶æ‡¶ï‡¶æ, ‡¶ï‡¶ï‡ßç‡¶∏‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞)", listOf(
                    "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ" to "01711151864"
                )
            ),
            BusSchedule(
                "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶® ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶ú", listOf(
                    "‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ" to "01333662823",
                    "‡¶¢‡¶æ‡¶ï‡¶æ" to "01333390582",
                    "‡¶ó‡¶æ‡¶®‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶∞‡¶æ" to "01826746959",
                    "‡¶ï‡¶æ‡¶≤‡ßÅ‡¶ñ‡¶æ‡¶≤‡ßÄ" to "01126746954",
                    "‡¶∏‡ßã‡¶®‡¶æ‡¶™‡ßÅ‡¶∞ ‡¶Æ‡ßã‡¶°‡¶º" to "01826746950",
                    "‡¶Æ‡¶æ‡¶õ‡¶™‡¶æ‡¶°‡¶º‡¶æ" to "01826746959",
                    "‡¶π‡¶æ‡¶¨‡¶æ‡¶∏‡¶™‡ßÅ‡¶∞" to "01333390586",
                    "‡¶∏‡ßá‡¶®‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ" to "01333662827"
                )
            ),
            BusSchedule(
                "‡¶π‡¶æ‡¶®‡¶ø‡¶´ ‡¶è‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶ú (‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‚ûù ‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ)", listOf(
                    "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ" to "01794594136"
                )
            ),
            BusSchedule(
                "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶π‡¶® ‡¶∏‡¶™‡ßç‡¶§‡¶¨‡¶∞‡ßç‡¶£‡¶æ", listOf(
                    "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶ø‡¶§‡¶ø" to "01907099021",
                    "‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ" to "01907099017",
                    "‡¶ï‡¶æ‡¶≤‡ßÅ‡¶ñ‡¶æ‡¶≤‡ßÄ" to "01907099018",
                    "‡¶Æ‡¶æ‡¶∏‡¶™‡¶æ‡¶°‡¶º‡¶æ" to "01907099023",
                    "‡¶ó‡¶æ‡¶®‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶∞‡¶æ" to "01907099019",
                    "‡¶π‡¶æ‡¶¨‡¶æ‡¶∏‡¶™‡ßÅ‡¶∞" to "01724822671",
                    "‡¶¨‡¶æ‡¶π‡¶æ‡¶¶‡ßÅ‡¶∞‡¶™‡ßÅ‡¶∞" to "01713549552",
                    "‡¶Æ‡ßÅ‡¶∞‡¶ó‡¶ø ‡¶´‡¶æ‡¶∞‡ßç‡¶Æ, ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ" to "01907099020",
                    "‡¶ï‡¶æ‡¶≤‡¶ø‡¶§‡¶≤‡¶æ" to "01907099024",
                    "‡¶¶‡¶∞‡¶ó‡¶æ‡¶§‡¶≤‡¶æ" to "01975339218",
                    "‡¶â‡¶¶‡¶Ø‡¶º‡¶™‡ßÅ‡¶∞" to "01754417406"
                )
            )

        )
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text("üìç ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ‡¶∞ ‡¶¨‡¶æ‡¶∏ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞", style = MaterialTheme.typography.titleLarge)

            LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                items(busList) { bus ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { selectedBus = bus },
                        shape = RoundedCornerShape(12.dp),
                        elevation = CardDefaults.elevatedCardElevation(4.dp)
                    ) {
                        Column(modifier = Modifier.padding(12.dp)) {
                            Text("‡¶®‡¶æ‡¶Æ: ${bus.name}", style = MaterialTheme.typography.titleMedium)
                            Text("‡¶∏‡ßç‡¶ü‡¶™‡ßá‡¶ú: ${bus.destinations.size}‡¶ü‡¶ø", fontSize = 14.sp)
                        }
                    }
                }
            }
        }

        FloatingActionButton(
            onClick = { showDialog = true },
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp)
        ) {
            Icon(Icons.Default.Add, contentDescription = "Add Bus")
        }

        if (showDialog) {
            AddBusDialog(
                onAdd = { name, destinations ->
                    busList.add(BusSchedule(name, destinations))
                    showDialog = false
                },
                onDismiss = { showDialog = false }
            )
        }

        selectedBus?.let {
            BusDetailsDialog(bus = it, onDismiss = { selectedBus = null })
        }
    }
}

// --- TIME SCHEDULE TAB ---
@Composable
fun TimeScheduleTab() {
    var showDialog by remember { mutableStateOf(false) }

    val busTimes = remember {
        mutableStateListOf(
            BusTime("‡¶∞‡¶æ‡¶¨‡ßá‡¶Ø‡¶º‡¶æ", "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ", "‡¶¢‡¶æ‡¶ï‡¶æ", "‡ß¨:‡ß¶‡ß¶ AM", "‡ß¶‡ßß‡ß≠xxxxxxx"),
            BusTime("‡¶∏‡ßå‡¶π‡¶æ‡¶∞‡ßç‡¶¶‡ßç‡¶Ø", "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ", "‡¶ö‡ßÅ‡¶Ø‡¶º‡¶æ‡¶°‡¶æ‡¶ô‡ßç‡¶ó‡¶æ", "‡ß≠:‡ß©‡ß¶ AM", "‡ß¶‡ßß‡ß≠xxxxxxx"),
            BusTime("‡¶ó‡ßã‡¶≤‡ßç‡¶°‡ßá‡¶® ‡¶≤‡¶æ‡¶á‡¶®", "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ", "‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ", "‡ßÆ:‡ßß‡ß´ AM", "‡ß¶‡ßß‡ßÆxxxxxxx")
        )
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 4.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text("‡¶¨‡¶æ‡¶∏", fontSize = 16.sp, modifier = Modifier.weight(1f))
                Text("‡¶∏‡ßç‡¶•‡¶æ‡¶®", fontSize = 16.sp, modifier = Modifier.weight(1f))
                Text("‡¶ó‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø", fontSize = 16.sp, modifier = Modifier.weight(1f))
                Text("‡¶∏‡¶Æ‡ßü", fontSize = 16.sp, modifier = Modifier.weight(1f))
            }

            LazyColumn(verticalArrangement = Arrangement.spacedBy(6.dp)) {
                items(busTimes) { time ->
                    val context = LocalContext.current
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable {
                                val phone = time.contact.replace("[^0-9+]".toRegex(), "")
                                val intent = Intent(Intent.ACTION_DIAL).apply {
                                    data = Uri.parse("tel:$phone")
                                }
                                context.startActivity(intent)
                            }
                            .padding(vertical = 6.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(time.busName, modifier = Modifier.weight(1f))
                        Text(time.from, modifier = Modifier.weight(1f))
                        Text(time.to, modifier = Modifier.weight(1f))
                        Text(time.time, modifier = Modifier.weight(1f))
                    }
                }
            }
        }

        FloatingActionButton(
            onClick = { showDialog = true },
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp)
        ) {
            Icon(Icons.Default.Add, contentDescription = "Add Time")
        }

        if (showDialog) {
            AddTimeDialog(
                onAdd = { newTime ->
                    busTimes.add(newTime)
                    showDialog = false
                },
                onDismiss = { showDialog = false }
            )
        }
    }
}

// --- Add Bus Dialog ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddBusDialog(
    onAdd: (String, List<Pair<String, String>>) -> Unit,
    onDismiss: () -> Unit
) {
    var name by remember { mutableStateOf("") }
    var destinationText by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = {
            Button(onClick = {
                if (name.isNotBlank() && destinationText.isNotBlank()) {
                    val destinations = destinationText
                        .split(",")
                        .mapNotNull {
                            val parts = it.trim().split(":")
                            if (parts.size == 2) parts[0].trim() to parts[1].trim() else null
                        }
                    onAdd(name, destinations)
                }
            }) {
                Text("‚úÖ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
            }
        },
        dismissButton = {
            OutlinedButton(onClick = onDismiss) {
                Text("‚ùå ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤")
            }
        },
        title = { Text("üÜï ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶æ‡¶∏ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®") },
        text = {
            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(
                    value = name,
                    onValueChange = { name = it },
                    label = { Text("‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ") }
                )
                OutlinedTextField(
                    value = destinationText,
                    onValueChange = { destinationText = it },
                    label = { Text("‡¶∏‡ßç‡¶ü‡¶™‡ßá‡¶ú:‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞, ‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ:017xxx,‡¶Æ‡¶æ‡¶ü‡¶ø‡¶™‡¶æ‡ßú‡¶æ:018xxx") }
                )
            }
        },
        shape = RoundedCornerShape(12.dp)
    )
}

// --- Add Time Dialog ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddTimeDialog(
    onAdd: (BusTime) -> Unit,
    onDismiss: () -> Unit
) {
    var busName by remember { mutableStateOf("") }
    var from by remember { mutableStateOf("") }
    var to by remember { mutableStateOf("") }
    var time by remember { mutableStateOf("") }
    var contact by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = {
            Button(onClick = {
                if (busName.isNotBlank() && from.isNotBlank() && to.isNotBlank() && time.isNotBlank()) {
                    onAdd(BusTime(busName, from, to, time, contact))
                }
            }) {
                Text("‚úÖ Save")
            }
        },
        dismissButton = {
            OutlinedButton(onClick = onDismiss) {
                Text("‚ùå Cancel")
            }
        },
        title = { Text("üÜï ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶Æ‡ßü‡¶∏‡ßÇ‡¶ö‡ßÄ") },
        text = {
            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(value = busName, onValueChange = { busName = it }, label = { Text("‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ") })
                OutlinedTextField(value = from, onValueChange = { from = it }, label = { Text("‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶∞ ‡¶∏‡ßç‡¶•‡¶æ‡¶®") })
                OutlinedTextField(value = to, onValueChange = { to = it }, label = { Text("‡¶ó‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø") })
                OutlinedTextField(value = time, onValueChange = { time = it }, label = { Text("‡¶∏‡¶Æ‡ßü") })
                OutlinedTextField(value = contact, onValueChange = { contact = it }, label = { Text("‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó") })
            }
        },
        shape = RoundedCornerShape(12.dp)
    )
}

// --- Bus Details Dialog ---
@Composable
fun BusDetailsDialog(bus: BusSchedule, onDismiss: () -> Unit) {
    val context = LocalContext.current

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = {
            TextButton(onClick = onDismiss) { Text("Cancel") }
        },
        title = { Text("üìã ${bus.name}") },
        text = {
            Column(verticalArrangement = Arrangement.spacedBy(6.dp)) {
                bus.destinations.forEach { (location, contact) ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable {
                                val phone = contact.replace("[^0-9+]".toRegex(), "")
                                val intent = Intent(Intent.ACTION_DIAL).apply {
                                    data = Uri.parse("tel:$phone")
                                }
                                context.startActivity(intent)
                            }
                            .padding(6.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text("üìç $location: ")
                        Spacer(modifier = Modifier.width(6.dp))
                        Text(contact, color = MaterialTheme.colorScheme.primary)
                    }
                }
            }
        },
        shape = RoundedCornerShape(12.dp)
    )
}
