package com.example.rajbaricity

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

import com.example.rajbaricity.model.BusCounter
import com.example.rajbaricity.model.Bustime
import com.example.rajbaricity.ui.RajbariViewModel

// --- Main Screen with Tabs ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BusScheduleScreen(viewModel: RajbariViewModel) {
    // Fetch data when the screen is first composed
    LaunchedEffect(Unit) {
        viewModel.getBusCounters()
        viewModel.getBusTimes()
    }

    val tabTitles = listOf("ЁЯЪМ ржХрж╛ржЙржирзНржЯрж╛рж░ рж╕ржорзВрж╣", "ЁЯХР рж╕ржоржпрж╝рж╕рзВржЪрзА")
    var selectedTab by remember { mutableStateOf(0) }
    val busCounters by viewModel.busCounters.collectAsState()
    val busTimes by viewModel.busTimes.collectAsState()

    Scaffold { padding ->
        Column(modifier = Modifier.padding(padding)) {
            TabRow(selectedTabIndex = selectedTab) {
                tabTitles.forEachIndexed { index, title ->
                    Tab(
                        selected = selectedTab == index,
                        onClick = { selectedTab = index },
                        text = {
                            Text(
                                text = title,
                                fontSize = 20.sp, // ЁЯСИ Increase font size here
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // You can add actual content based on selectedTab here
            when (selectedTab) {
                0 -> CounterTabScreen(busCounters, viewModel) // ЁЯЪМ ржХрж╛ржЙржирзНржЯрж╛рж░ рж╕ржорзВрж╣
                1 -> TimeScheduleTab(busTimes, viewModel)     // ЁЯХР рж╕ржоржпрж╝рж╕рзВржЪрзА
            }
        }
    }
}


// --- COUNTER TAB ---
@Composable
fun CounterTabScreen(dynamicBusList: List<BusCounter>, viewModel: RajbariViewModel) {
    var showDialog by remember { mutableStateOf(false) }
    var selectedBus by remember { mutableStateOf<BusCounter?>(null) }

    val staticBusList = remember {
        listOf(
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржкрж╛ржВрж╢рж╛", contact = "01966274466"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╣рж╛рж░рзНржЯ", contact = "01966274400"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржорж╛ржЯрж┐ржкрж╛ржбрж╝рж╛", contact = "01400077304"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛ржгрзАржмрж╣", contact = "01400522110"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╣рж░ржкрзБрж░", contact = "01933799441"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛рж▓рж┐ржпрж╝рж╛ржХрж╛ржирзНржжрж┐", contact = "01909191555"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржирж╛рж░рзБржпрж╝рж╛", contact = "01946181118"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржЧрж╛ржирзНржзрж┐ржорж╛рж░рж╛", contact = "01400567996"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржЪржирзНржжржирж┐", contact = "01400556233"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржжрж░ржЧрж╛ржЯрзЛрж▓рж╛", contact = "01952530052"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "рж╣рж╛ржмрж╛рж╕ржкрзБрж░", contact = "01724822671"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржЬрж╛ржорж╛рж▓ржкрзБрж░", contact = "01967737372"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржХрж╛рж▓рж┐ржмрж╛ржбрж╝рж┐", contact = "01709299767"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржиржжрзБрж░рж┐ржпрж╝рж╛ржШрж╛ржЯ", contact = "017160058957"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛рж╣рзЗрж░ржорзЛржбрж╝", contact = "01714210207"),
            BusCounter(counterName = "рж░рж╛ржмрзЗржпрж╝рж╛ ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛рж╣рж╛ржжрзБрж░ржкрзБрж░", contact = "01713549552"),

            // рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржЧрж╛ржмрждрж▓рзА (ржврж╛ржХрж╛)", contact = "01768235535"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржкрж╛ржВрж╢рж╛", contact = "01718558338"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "рж░рж╛ржЬржмрж╛ржбрж╝рзА", contact = "01733167396"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржиржжрзБрж░рж┐ржпрж╝рж╛ржШрж╛ржЯ", contact = "01716005957"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛рж╣рзЗрж░ржорзЛржбрж╝", contact = "01713905113"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржЬрж╛ржорж╛рж▓ржкрзБрж░", contact = "01729691558"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╣рж░ржкрзБрж░", contact = "01736785093"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛рж▓рж┐ржпрж╝рж╛ржХрж╛ржирзНржжрж┐", contact = "01734626147"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржирж╛рж░рзБржпрж╝рж╛", contact = "01916723226"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "рж╣рж╛ржмрж╛рж╕ржкрзБрж░", contact = "01719799100"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржХрж╛рж▓рж┐ржмрж╛ржбрж╝рж┐", contact = "01825408210"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛ржгрзАржмрж╣", contact = "01740909540"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "рж╕рзЗржиржЧрзНрж░рж╛ржо", contact = "01726960435"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржорзАрж░ржЧрзА ржмрж╛ржЬрж╛рж░", contact = "01740849550"),
            BusCounter(counterName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп ржкрж░рж┐ржмрж╣ржи", location = "ржмрж╛ржЧржбрзБрж▓рж┐", contact = "01724364707"),

            // ржЧрзЛрж▓рзНржбрзЗржи рж▓рж╛ржЗржи ржкрж░рж┐ржмрж╣ржи
            BusCounter(counterName = "ржЧрзЛрж▓рзНржбрзЗржи рж▓рж╛ржЗржи ржкрж░рж┐ржмрж╣ржи", location = "рж░рж╛ржЬржмрж╛ржбрж╝рзА", contact = "01711151864"),

            // ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "ржкрж╛ржВрж╢рж╛", contact = "01333662823"),
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "ржврж╛ржХрж╛", contact = "01333390582"),
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "ржЧрж╛ржирзНржзрж┐ржорж╛рж░рж╛", contact = "01826746959"),
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "ржХрж╛рж▓рзБржЦрж╛рж▓рзА", contact = "01126746954"),
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "рж╕рзЛржирж╛ржкрзБрж░ ржорзЛржбрж╝", contact = "01826746950"),
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "ржорж╛ржЫржкрж╛ржбрж╝рж╛", contact = "01826746959"),
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "рж╣рж╛ржмрж╛рж╕ржкрзБрж░", contact = "01333390586"),
            BusCounter(counterName = "ржЬрж╛ржорж╛ржи ржЗржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "рж╕рзЗржиржЧрзНрж░рж╛ржо", contact = "01333662827"),

            // рж╣рж╛ржирж┐ржл ржПржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ
            BusCounter(counterName = "рж╣рж╛ржирж┐ржл ржПржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ", location = "рж░рж╛ржЬржмрж╛ржбрж╝рзА", contact = "01794594136"),

            // рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржорж╛рж▓рж┐ржХ рж╕ржорж┐рждрж┐", contact = "01907099021"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржкрж╛ржВрж╢рж╛", contact = "01907099017"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржХрж╛рж▓рзБржЦрж╛рж▓рзА", contact = "01907099018"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржорж╛рж╕ржкрж╛ржбрж╝рж╛", contact = "01907099023"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржЧрж╛ржирзНржзрж┐ржорж╛рж░рж╛", contact = "01907099019"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "рж╣рж╛ржмрж╛рж╕ржкрзБрж░", contact = "01724822671"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржмрж╛рж╣рж╛ржжрзБрж░ржкрзБрж░", contact = "01713549552"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржорзБрж░ржЧрж┐ ржлрж╛рж░рзНржо, рж░рж╛ржЬржмрж╛ржбрж╝рзА", contact = "01907099020"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржХрж╛рж▓рж┐рждрж▓рж╛", contact = "01907099024"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржжрж░ржЧрж╛рждрж▓рж╛", contact = "01975339218"),
            BusCounter(counterName = "рж░рж╛ржЬржмрж╛ржбрж╝рзА ржкрж░рж┐ржмрж╣ржи рж╕ржкрзНрждржмрж░рзНржгрж╛", location = "ржЙржжржпрж╝ржкрзБрж░", contact = "01754417406")
        )
    }

    val combinedBusList = remember(staticBusList, dynamicBusList) {
        staticBusList + dynamicBusList
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text("ЁЯУН рж░рж╛ржЬржмрж╛ржбрж╝рзАрж░ ржмрж╛рж╕ ржХрж╛ржЙржирзНржЯрж╛рж░", style = MaterialTheme.typography.titleLarge)

            LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                items(combinedBusList) { bus ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { selectedBus = bus },
                        shape = RoundedCornerShape(12.dp),
                        elevation = CardDefaults.elevatedCardElevation(4.dp)
                    ) {
                        Column(modifier = Modifier.padding(12.dp)) {
                            Text("ржирж╛ржо: ${bus.counterName}", style = MaterialTheme.typography.titleMedium)
                            Text("рж╕рзНржерж╛ржи: ${bus.location}", fontSize = 14.sp)
                            Text("ржпрзЛржЧрж╛ржпрзЛржЧ: ${bus.contact}", fontSize = 14.sp)
                        }
                    }
                }
            }
        }

        FloatingActionButton(
            onClick = { showDialog = true },
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp)
        ) {
            Icon(Icons.Default.Add, contentDescription = "Add Bus")
        }

        if (showDialog) {
            AddBusDialog(
                onAdd = { name, location, contact ->
                    viewModel.addBusCounter(BusCounter(counterName = name, location = location, contact = contact))
                    showDialog = false
                },
                onDismiss = { showDialog = false }
            )
        }

        selectedBus?.let {
            BusDetailsDialog(bus = it, onDismiss = { selectedBus = null })
        }
    }
}

// --- TIME SCHEDULE TAB ---
 @Composable
fun TimeScheduleTab(dynamicBusTimes: List<Bustime>, viewModel: RajbariViewModel) {
    var showDialog by remember { mutableStateOf(false) }

    val staticBusTimes = remember {
        listOf(
            Bustime(busName = "рж░рж╛ржмрзЗржпрж╝рж╛", fromLocation = "рж░рж╛ржЬржмрж╛ржбрж╝рзА", toLocation = "ржврж╛ржХрж╛", time = "рзм:рзжрзж AM", contact = "рзжрззрзнxxxxxxx"),
            Bustime(busName = "рж╕рзМрж╣рж╛рж░рзНржжрзНржп", fromLocation = "рж░рж╛ржЬржмрж╛ржбрж╝рзА", toLocation = "ржЪрзБржпрж╝рж╛ржбрж╛ржЩрзНржЧрж╛", time = "рзн:рзйрзж AM", contact = "рзжрззрзнxxxxxxx"),
            Bustime(busName = "ржЧрзЛрж▓рзНржбрзЗржи рж▓рж╛ржЗржи", fromLocation = "рж░рж╛ржЬржмрж╛ржбрж╝рзА", toLocation = "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо", time = "рзо:рззрзл AM", contact = "рзжрззрзоxxxxxxx")
        )
    }

    val combinedBusTimes = remember(staticBusTimes, dynamicBusTimes) {
        staticBusTimes + dynamicBusTimes
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 4.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text("ржмрж╛рж╕", fontSize = 16.sp, modifier = Modifier.weight(1f))
                Text("рж╕рзНржерж╛ржи", fontSize = 16.sp, modifier = Modifier.weight(1f))
                Text("ржЧржирзНрждржмрзНржп", fontSize = 16.sp, modifier = Modifier.weight(1f))
                Text("рж╕ржорзЯ", fontSize = 16.sp, modifier = Modifier.weight(1f))
            }

            LazyColumn(verticalArrangement = Arrangement.spacedBy(6.dp)) {
                items(combinedBusTimes) { time ->
                    val context = LocalContext.current
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable {
                                val phone = time.contact.replace("[^0-9+]".toRegex(), "")
                                val intent = Intent(Intent.ACTION_DIAL).apply {
                                    data = Uri.parse("tel:$phone")
                                }
                                context.startActivity(intent)
                            }
                            .padding(vertical = 6.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(time.busName, modifier = Modifier.weight(1f))
                        Text(time.fromLocation, modifier = Modifier.weight(1f))
                        Text(time.toLocation, modifier = Modifier.weight(1f))
                        Text(time.time, modifier = Modifier.weight(1f))
                    }
                }
            }
        }

        FloatingActionButton(
            onClick = { showDialog = true },
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp)
        ) {
            Icon(Icons.Default.Add, contentDescription = "Add Time")
        }

        if (showDialog) {
            AddTimeDialog(
                onAdd = { newTime ->
                    viewModel.addBusTime(newTime)
                    showDialog = false
                },
                onDismiss = { showDialog = false }
            )
        }
    }
}

// --- Add Bus Dialog ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddBusDialog(
    onAdd: (String, String, String) -> Unit,
    onDismiss: () -> Unit
) {
    var name by remember { mutableStateOf("") }
    var location by remember { mutableStateOf("") }
    var contact by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = {
            Button(onClick = {
                if (name.isNotBlank() && location.isNotBlank()) {
                    onAdd(name, location, contact)
                }
            }) {
                Text("тЬЕ ржпрзЛржЧ ржХрж░рзБржи")
            }
        },
        dismissButton = {
            OutlinedButton(onClick = onDismiss) {
                Text("тЭМ ржмрж╛рждрж┐рж▓")
            }
        },
        title = { Text("ЁЯЖХ ржирждрзБржи ржмрж╛рж╕ ржпрзБржХрзНржд ржХрж░рзБржи") },
        text = {
            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(
                    value = name,
                    onValueChange = { name = it },
                    label = { Text("ржмрж╛рж╕рзЗрж░ ржирж╛ржо") }
                )
                OutlinedTextField(
                    value = location,
                    onValueChange = { location = it },
                    label = { Text("рж╕рзНржерж╛ржи") }
                )
                OutlinedTextField(
                    value = contact,
                    onValueChange = { contact = it },
                    label = { Text("ржпрзЛржЧрж╛ржпрзЛржЧ") }
                )
            }
        },
        shape = RoundedCornerShape(12.dp)
    )
}

// --- Add Time Dialog ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddTimeDialog(
    onAdd: (Bustime) -> Unit,
    onDismiss: () -> Unit
) {
    var busName by remember { mutableStateOf("") }
    var from by remember { mutableStateOf("") }
    var to by remember { mutableStateOf("") }
    var time by remember { mutableStateOf("") }
    var contact by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = {
            Button(onClick = {
                if (busName.isNotBlank() && from.isNotBlank() && to.isNotBlank() && time.isNotBlank()) {
                    onAdd(Bustime(busName = busName, fromLocation = from, toLocation = to, time = time, contact = contact))
                }
            }) {
                Text("тЬЕ Save")
            }
        },
        dismissButton = {
            OutlinedButton(onClick = onDismiss) {
                Text("тЭМ Cancel")
            }
        },
        title = { Text("ЁЯЖХ ржирждрзБржи рж╕ржорзЯрж╕рзВржЪрзА") },
        text = {
            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                OutlinedTextField(value = busName, onValueChange = { busName = it }, label = { Text("ржмрж╛рж╕рзЗрж░ ржирж╛ржо") })
                OutlinedTextField(value = from, onValueChange = { from = it }, label = { Text("ржпрж╛рждрзНрж░рж╛ рж╢рзБрж░рзБрж░ рж╕рзНржерж╛ржи") })
                OutlinedTextField(value = to, onValueChange = { to = it }, label = { Text("ржЧржирзНрждржмрзНржп") })
                OutlinedTextField(value = time, onValueChange = { time = it }, label = { Text("рж╕ржорзЯ") })
                OutlinedTextField(value = contact, onValueChange = { contact = it }, label = { Text("ржпрзЛржЧрж╛ржпрзЛржЧ") })
            }
        },
        shape = RoundedCornerShape(12.dp)
    )
}

// --- Bus Details Dialog ---
@Composable
fun BusDetailsDialog(bus: BusCounter, onDismiss: () -> Unit) {
    val context = LocalContext.current

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = {
            TextButton(onClick = onDismiss) { Text("Cancel") }
        },
        title = { Text("ЁЯУЛ ${bus.counterName}") },
        text = {
            Column(verticalArrangement = Arrangement.spacedBy(6.dp)) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable {
                            val phone = bus.contact.replace("[^0-9+]".toRegex(), "")
                            val intent = Intent(Intent.ACTION_DIAL).apply {
                                data = Uri.parse("tel:$phone")
                            }
                            context.startActivity(intent)
                        }
                        .padding(6.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text("ЁЯУН ${bus.location}: ")
                    Spacer(modifier = Modifier.width(6.dp))
                    Text(bus.contact, color = MaterialTheme.colorScheme.primary)
                }
            }
        },
        shape = RoundedCornerShape(12.dp)
    )
}