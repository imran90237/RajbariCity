package com.example.rajbaricity

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.rajbaricity.model.Courier
import com.example.rajbaricity.ui.RajbariViewModel

// Main Screen
@Composable
fun CourierServiceScreen(viewModel: RajbariViewModel = viewModel()) {
    LaunchedEffect(Unit) {
        viewModel.getCouriers()
    }

    var showForm by remember { mutableStateOf(false) }
    val couriers by viewModel.couriers.collectAsState()
    var searchQuery by remember { mutableStateOf("") }

    val staticCouriers = remember {
        listOf(
            Courier(
                name = "Sundarban Courier Service ( ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§µ‡§® ‡§ï‡•Å‡§∞‡§ø‡§Ø‡§∞ ‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏)",
                address = "‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá, ‡¶Æ‡ßá‡¶á‡¶® ‡¶∞‡ßã‡¶°, ‡¶™‡¶æ‡¶¨‡¶≤‡¶ø‡¶ï ‡¶π‡ßá‡¶≤‡¶•, ‡¶Æ‡¶®‡¶ø‡¶ï ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡¶∂‡¶®, ‡¶∏‡¶ú‡ßç‡¶ú‡¶®‡¶ñ‡¶æ‡¶®‡ßç‡¶¶‡¶æ, ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡ßú‡ßÄ ‡¶∏‡¶¶‡¶∞",
                mapUrl = "",
                phone = "01963603071, 01726233505, 01324727909"
            ),
            Courier(
                name = "Pathao Courier (‡¶™‡¶æ‡¶†‡¶æ‡¶ì ‡¶ï‡ßÅ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞)",
                address = "QJ3W+WW5, ‡¶∏‡¶ú‡ßç‡¶ú‡¶®‡¶ñ‡¶æ‡¶®‡ßç‡¶¶‡¶æ ‡¶∞‡ßã‡¶°, ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡ßú‡ßÄ",
                mapUrl = "",
                phone = "01958-522338"
            ),
            Courier(
                name = "SA Paribahan (‡¶è‡¶∏ ‡¶è ‡¶™‡¶∞‡¶ø‡¶¨‡¶π‡¶®)",
                address = "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶á‡¶Ç‡¶≤‡¶ø‡¶∂ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü, QJ6W+JP7, ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ",
                mapUrl = "",
                phone = "01766-688384"
            ),
            Courier(
                name = "RedX (‡¶∞‡ßá‡¶°‡¶è‡¶ï‡ßç‡¶∏) - ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶π‡¶æ‡¶¨",
                address = "PJXR+H7C, ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡ßú‡ßÄ",
                mapUrl = "",
                phone = "01324-711562"
            ),
            Courier(
                name = "Steadfast Courier (‡¶∏‡ßç‡¶ü‡ßá‡¶°‡¶´‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡ßÅ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞) - ‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ",
                address = "QCJ7+244, ‡¶¨‡¶ø‡¶∑‡ßç‡¶£‡ßÅ‡¶™‡ßÅ‡¶∞, ‡¶™‡¶æ‡¶Ç‡¶∂‡¶æ, ‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡ßú‡ßÄ",
                mapUrl = "",
                phone = "01824239406"
            )
        )
    }

    Scaffold(
        floatingActionButton = {
            FloatingActionButton(onClick = { showForm = true }) {
                Icon(
                    imageVector = Icons.Default.Add,
                    contentDescription = "Add Courier",
                    tint = Color.Black
                )
            }
        },
        floatingActionButtonPosition = FabPosition.End
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
                .padding(paddingValues)
        ) {
            Text(
                text = "üì¶ ‡¶ï‡ßÅ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )

            OutlinedTextField(
                value = searchQuery,
                onValueChange = { searchQuery = it },
                label = { Text("‡¶ï‡ßÅ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
            )

            LazyColumn(modifier = Modifier.weight(1f)) {
                val filteredList = couriers.filter {
                    it.name.contains(searchQuery, ignoreCase = true)
                }
                items(filteredList) { courier ->
                    CourierCard(courier)
                }
                items(staticCouriers) { courier ->
                    CourierCard(courier)
                }
            }
        }

        if (showForm) {
            AddCourierForm(
                onCourierAdded = { newCourier ->
                    viewModel.addCourier(newCourier)
                    showForm = false
                },
                onCancel = {
                    showForm = false
                }
            )
        }
    }
}

// Courier Card
@Composable
fun CourierCard(courier: Courier) {
    val context = LocalContext.current

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text("üè¢ ‡¶®‡¶æ‡¶Æ: ${courier.name}", fontSize = 16.sp)
            Text("üìç ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ: ${courier.address}", fontSize = 14.sp)

            if (courier.mapUrl.isNotBlank()) {
                Text(
                    text = "üó∫Ô∏è ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®",
                    color = Color(0xFF1976D2),
                    modifier = Modifier
                        .clickable {
                            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(courier.mapUrl))
                            context.startActivity(intent)
                        }
                        .padding(vertical = 4.dp)
                )
            }

            Text(
                text = "üìû ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤: ${courier.phone}",
                color = Color(0xFF0D47A1),
                modifier = Modifier
                    .clickable {
                        val intent = Intent(Intent.ACTION_DIAL, Uri.parse("tel:${courier.phone}"))
                        context.startActivity(intent)
                    }
            )
        }
    }
}

// Add Courier Form
@Composable
fun AddCourierForm(
    onCourierAdded: (Courier) -> Unit,
    onCancel: () -> Unit,
) {
    var name by remember { mutableStateOf("") }
    var address by remember { mutableStateOf("") }
    var mapUrl by remember { mutableStateOf("") }
    var phone by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = onCancel,
        title = { Text("‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßÅ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø") },
        text = {
            Column(
                modifier = Modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                OutlinedTextField(
                    value = name,
                    onValueChange = { name = it },
                    label = { Text("üè¢ ‡¶®‡¶æ‡¶Æ") },
                    modifier = Modifier.fillMaxWidth()
                )

                OutlinedTextField(
                    value = address,
                    onValueChange = { address = it },
                    label = { Text("üìç ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ") },
                    modifier = Modifier.fillMaxWidth()
                )

                OutlinedTextField(
                    value = mapUrl,
                    onValueChange = { mapUrl = it },
                    label = { Text("üó∫Ô∏è ‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶≤‡¶ø‡¶Ç‡¶ï") },
                    modifier = Modifier.fillMaxWidth()
                )

                OutlinedTextField(
                    value = phone,
                    onValueChange = { phone = it },
                    label = { Text("üìû ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤") },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    if (name.isNotBlank() && phone.isNotBlank()) {
                        onCourierAdded(Courier(name, address, mapUrl, phone))
                    }
                }
            ) {
                Text("‚úÖ Save")
            }
        },
        dismissButton = {
            OutlinedButton(onClick = onCancel) {
                Text("‚ùå Cancel")
            }
        }
    )
}
